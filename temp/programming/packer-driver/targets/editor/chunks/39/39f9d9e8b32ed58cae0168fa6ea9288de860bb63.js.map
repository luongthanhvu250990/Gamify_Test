{"version":3,"sources":["file:///Users/admin/Documents/GitHub/Gamify_Test/assets/Scripts/Problem2/ScrollComp.ts"],"names":["_decorator","CCFloat","Component","instantiate","Label","Node","NodePool","Prefab","Slider","ItemComp","ccclass","property","ScrollComp","group","name","type","snapSpeed","countData","itemTotal","pool","yOffset","actionIdx","nextActions","triggerRemove","bind","triggerAdd","onLoad","start","init","update","dt","itemSpacing","getTime","timeRemoveSlider","offset","Math","min","abs","contentNode","children","forEach","child","setPosition","position","x","y","initTotal","i","newItem","createItem","addItemToTop","updateSliderInfo","createNode","item","size","get","itemPrefab","deleteNode","put","newNode","getComponent","setData","setSiblingIndex","childCount","length","topChild","setParent","deleteItem","bot","slider","max","timeMin","progress","timeMultiply","doSchedule","times","timeAddSlider","scheduleOnce","timeAddInfoLabel","string","round","timeRemoveInfoLabel","onClick","unscheduleAllCallbacks"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  CCFloat,\n  Component,\n  instantiate,\n  Label,\n  macro,\n  Node,\n  NodePool,\n  Prefab,\n  Slider,\n  UITransform,\n  Vec3,\n} from \"cc\";\nimport { ItemComp } from \"./ItemComp\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ScrollComp\")\nexport class ScrollComp extends Component {\n  @property(Node)\n  private contentNode: Node = null;\n\n  @property(Prefab)\n  private itemPrefab: Prefab = null;\n\n  @property()\n  private itemSpacing: number = 50;\n\n  private snapSpeed = 3000;\n\n  @property({ group: { name: \"Time Slider\" }, type: Slider })\n  timeAddSlider: Slider = null;\n\n  @property({ group: { name: \"Time Slider\" }, type: Label })\n  timeAddInfoLabel: Label = null;\n\n  @property({ group: { name: \"Time Slider\" }, type: Slider })\n  timeRemoveSlider: Slider = null;\n\n  @property({ group: { name: \"Time Slider\" }, type: Label })\n  timeRemoveInfoLabel: Label = null;\n\n  @property({ group: { name: \"Time Slider\" }, type: CCFloat })\n  private timeMin: number = 0.001;\n\n  @property({ group: { name: \"Time Slider\" }, type: CCFloat })\n  private timeMultiply: number = 1;\n\n  private countData: number = 0;\n  private itemTotal: number = 0;\n  private pool: NodePool = null;\n\n  private yOffset: number = 0;\n  private actionIdx = 0;\n\n  protected onLoad(): void {\n    this.pool = new NodePool();\n  }\n\n  protected start(): void {\n    this.init();\n  }\n\n  protected update(dt: number): void {\n    if (this.yOffset == 0) return;\n\n    this.snapSpeed = this.itemSpacing / this.getTime(this.timeRemoveSlider);\n    let offset = Math.min(Math.abs(this.yOffset), dt * this.snapSpeed);\n    this.contentNode.children.forEach((child) => {\n      child.setPosition(child.position.x, child.position.y - offset);\n    });\n    this.yOffset += offset;\n  }\n\n  private init() {\n    const initTotal = 20;\n    for (let i = 0; i < initTotal; i++) {\n      let newItem = this.createItem();\n      this.addItemToTop(newItem);\n    }\n\n    this.updateSliderInfo();\n  }\n\n  private createNode(): Node {\n    let item: Node = null;\n    if (this.pool.size() > 0) item = this.pool.get();\n    else {\n      item = instantiate(this.itemPrefab);\n    }\n    return item;\n  }\n\n  private deleteNode(item: Node) {\n    this.pool.put(item);\n  }\n\n  private createItem(): Node {\n    this.countData++;\n    let newNode = this.createNode();\n\n    newNode.getComponent(ItemComp).setData(this.countData);\n    return newNode;\n  }\n\n  addItemToTop(newNode: Node) {\n    newNode.setSiblingIndex(this.itemTotal);\n\n    let y = 0;\n    let childCount = this.contentNode.children.length;\n    let topChild = this.contentNode.children[childCount - 1];\n    if (topChild) {\n      y = topChild.position.y + this.itemSpacing;\n    }\n    newNode.setParent(this.contentNode);\n    newNode.setPosition(0, y, 0);\n\n    this.itemTotal++;\n  }\n\n  private deleteItem(item: Node) {\n    this.itemTotal--;\n    this.deleteNode(item);\n  }\n\n  triggerAdd() {\n    let newItem = this.createItem();\n    this.addItemToTop(newItem);\n  }\n\n  triggerRemove() {\n    let bot = this.contentNode.children[0];\n    this.deleteItem(bot);\n    this.yOffset -= this.itemSpacing;\n  }\n\n  private nextActions = [\n    this.triggerRemove.bind(this),\n    this.triggerAdd.bind(this),\n  ];\n\n  getTime(slider: Slider) {\n    return Math.max(this.timeMin, slider.progress * this.timeMultiply);\n  }\n\n  doSchedule() {\n    let times = [\n      this.getTime(this.timeAddSlider),\n      this.getTime(this.timeRemoveSlider),\n    ];\n\n    this.scheduleOnce(() => {\n      this.nextActions[this.actionIdx]();\n      this.actionIdx++;\n      this.actionIdx %= 2;\n      this.doSchedule();\n    }, times[this.actionIdx]);\n  }\n\n  updateSliderInfo() {\n    this.timeAddInfoLabel.string = `${Math.round(\n      this.getTime(this.timeAddSlider) * 1000\n    )}ms`;\n    this.timeRemoveInfoLabel.string = `${Math.round(\n      this.getTime(this.timeRemoveSlider) * 1000\n    )}ms`;\n  }\n\n  onClick() {\n    this.unscheduleAllCallbacks();\n    this.doSchedule();\n  }\n}\n"]}