{"version":3,"sources":["file:///Users/admin/Documents/GitHub/Gamify_Test/assets/Scripts/Problem2/ScrollComp.ts"],"names":["_decorator","Component","instantiate","Node","NodePool","Prefab","Slider","ItemComp","ccclass","property","ScrollComp","group","name","type","countData","itemTotal","pool","yOffset","nextActions","triggerRemove","bind","triggerAdd","times","idx","onLoad","start","init","update","dt","offset","Math","min","abs","snapSpeed","contentNode","children","forEach","child","setPosition","position","x","y","initTotal","i","newItem","createItem","addItemToTop","createNode","item","size","get","itemPrefab","deleteNode","put","newNode","getComponent","setData","setSiblingIndex","childCount","length","topChild","itemSpacing","setParent","deleteItem","bot","doSchedule","scheduleOnce","onClick"],"mappings":"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","sourcesContent":["import {\n  _decorator,\n  Component,\n  instantiate,\n  macro,\n  Node,\n  NodePool,\n  Prefab,\n  Slider,\n  UITransform,\n  Vec3,\n} from \"cc\";\nimport { ItemComp } from \"./ItemComp\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"ScrollComp\")\nexport class ScrollComp extends Component {\n  @property(Node)\n  private contentNode: Node = null;\n\n  @property(Prefab)\n  private itemPrefab: Prefab = null;\n\n  @property()\n  private itemSpacing: number = 50;\n\n  @property()\n  private snapSpeed = 3000;\n\n  @property({ group: { name: \"Time Slider\" }, type: Slider })\n  timeAddSlider: Slider = null;\n\n  @property({ group: { name: \"Time Slider\" }, type: Slider })\n  timeRemoveSlider: Slider = null;\n\n  private countData: number = 0;\n  private itemTotal: number = 0;\n  private pool: NodePool = null;\n\n  private yOffset: number = 0;\n\n  protected onLoad(): void {\n    this.pool = new NodePool();\n  }\n\n  protected start(): void {\n    this.init();\n  }\n\n  protected update(dt: number): void {\n    if (this.yOffset == 0) return;\n\n    let offset = Math.min(Math.abs(this.yOffset), dt * this.snapSpeed);\n    this.contentNode.children.forEach((child) => {\n      child.setPosition(child.position.x, child.position.y - offset);\n    });\n    this.yOffset += offset;\n  }\n\n  private init() {\n    const initTotal = 20;\n    for (let i = 0; i < initTotal; i++) {\n      let newItem = this.createItem();\n      this.addItemToTop(newItem);\n    }\n  }\n\n  private createNode(): Node {\n    let item: Node = null;\n    if (this.pool.size() > 0) item = this.pool.get();\n    else {\n      item = instantiate(this.itemPrefab);\n    }\n    return item;\n  }\n\n  private deleteNode(item: Node) {\n    this.pool.put(item);\n  }\n\n  private createItem(): Node {\n    this.countData++;\n    let newNode = this.createNode();\n\n    newNode.getComponent(ItemComp).setData(this.countData);\n    return newNode;\n  }\n\n  addItemToTop(newNode: Node) {\n    newNode.setSiblingIndex(this.itemTotal);\n\n    let y = 0;\n    let childCount = this.contentNode.children.length;\n    let topChild = this.contentNode.children[childCount - 1];\n    if (topChild) {\n      y = topChild.position.y + this.itemSpacing;\n    }\n    newNode.setParent(this.contentNode);\n    newNode.setPosition(0, y, 0);\n\n    this.itemTotal++;\n  }\n\n  private deleteItem(item: Node) {\n    this.itemTotal--;\n    this.deleteNode(item);\n  }\n\n  triggerAdd() {\n    let newItem = this.createItem();\n    this.addItemToTop(newItem);\n  }\n\n  triggerRemove() {\n    let bot = this.contentNode.children[0];\n    this.deleteItem(bot);\n    this.yOffset -= this.itemSpacing;\n  }\n\n  private nextActions = [\n    this.triggerRemove.bind(this),\n    this.triggerAdd.bind(this),\n  ];\n\n  private times = [0.1, 0.05];\n  private idx = 0;\n  doSchedule() {\n    this.scheduleOnce(() => {\n      this.nextActions[this.idx]();\n      this.idx++;\n      this.idx %= 2;\n      this.doSchedule();\n    }, this.times[this.idx]);\n  }\n  onClick() {\n    this.doSchedule();\n  }\n}\n"]}