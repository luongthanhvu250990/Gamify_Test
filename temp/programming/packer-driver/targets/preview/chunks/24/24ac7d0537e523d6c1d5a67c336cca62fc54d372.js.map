{"version":3,"sources":["file:///Users/admin/Documents/GitHub/Gamify_Test/assets/Scripts/Problem1/RotateAroundComp.ts"],"names":["_decorator","Component","Node","ccclass","property","RotateAroundComp","isRotate","angle","originPos","start","init","startPos","node","worldPosition","originNode","Math","atan2","y","x","rotate","dt","angleRotateSpeed","PI","newX","radius","cos","newY","sin","setWorldPosition","z","update","deltaTime","switRotateStatus"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,I,OAAAA,I;;;;;;;;;OAC1B;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;kCAGjBK,gB,WADZF,OAAO,CAAC,kBAAD,C,UAELC,QAAQ,CAACF,IAAD,C,UAGRE,QAAQ,E,UAGRA,QAAQ,E,2BARX,MACaC,gBADb,SACsCJ,SADtC,CACgD;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA,eAUtCK,QAVsC,GAUlB,KAVkB;AAAA,eAWtCC,KAXsC,GAWtB,CAXsB;AAAA,eAYtCC,SAZsC;AAAA;;AAapCC,QAAAA,KAAK,GAAS;AACtB,eAAKC,IAAL;AACD;;AAEDA,QAAAA,IAAI,GAAG;AACL,eAAKJ,QAAL,GAAgB,KAAhB;AAEA,cAAIK,QAAQ,GAAG,KAAKC,IAAL,CAAUC,aAAzB;AACA,eAAKL,SAAL,GAAiB,KAAKM,UAAL,CAAgBD,aAAjC;AACA,eAAKN,KAAL,GAAaQ,IAAI,CAACC,KAAL,CACXL,QAAQ,CAACM,CAAT,GAAa,KAAKT,SAAL,CAAeS,CADjB,EAEXN,QAAQ,CAACO,CAAT,GAAa,KAAKV,SAAL,CAAeU,CAFjB,CAAb;AAID;;AAEOC,QAAAA,MAAM,CAACC,EAAD,EAAK;AACjB,eAAKb,KAAL,IAAe,KAAKc,gBAAL,GAAwBD,EAAxB,GAA6BL,IAAI,CAACO,EAAnC,GAAyC,GAAvD;AAEA,cAAMC,IAAI,GAAG,KAAKf,SAAL,CAAeU,CAAf,GAAmB,KAAKM,MAAL,GAAcT,IAAI,CAACU,GAAL,CAAS,KAAKlB,KAAd,CAA9C;AACA,cAAMmB,IAAI,GAAG,KAAKlB,SAAL,CAAeS,CAAf,GAAmB,KAAKO,MAAL,GAAcT,IAAI,CAACY,GAAL,CAAS,KAAKpB,KAAd,CAA9C;AAEA,eAAKK,IAAL,CAAUgB,gBAAV,CAA2BL,IAA3B,EAAiCG,IAAjC,EAAuC,KAAKd,IAAL,CAAUC,aAAV,CAAwBgB,CAA/D;AACD;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACxB,cAAI,KAAKzB,QAAT,EAAmB,KAAKa,MAAL,CAAYY,SAAZ;AACpB;;AAEDC,QAAAA,gBAAgB,GAAG;AACjB,eAAK1B,QAAL,GAAgB,CAAC,KAAKA,QAAtB;AACD;;AA3C6C,O;;;;;iBAEnB,I;;;;;;;iBAGV,G;;;;;;;iBAGkB,C","sourcesContent":["import { _decorator, Component, Node, Vec3 } from \"cc\";\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"RotateAroundComp\")\nexport class RotateAroundComp extends Component {\n  @property(Node)\n  private originNode: Node = null;\n\n  @property()\n  radius: number = 200;\n\n  @property()\n  private angleRotateSpeed: number = 0;\n\n  private isRotate: boolean = false;\n  private angle: number = 0;\n  private originPos: Vec3;\n  protected start(): void {\n    this.init();\n  }\n\n  init() {\n    this.isRotate = false;\n\n    let startPos = this.node.worldPosition;\n    this.originPos = this.originNode.worldPosition;\n    this.angle = Math.atan2(\n      startPos.y - this.originPos.y,\n      startPos.x - this.originPos.x\n    );\n  }\n\n  private rotate(dt) {\n    this.angle += (this.angleRotateSpeed * dt * Math.PI) / 180;\n\n    const newX = this.originPos.x + this.radius * Math.cos(this.angle);\n    const newY = this.originPos.y + this.radius * Math.sin(this.angle);\n\n    this.node.setWorldPosition(newX, newY, this.node.worldPosition.z);\n  }\n\n  update(deltaTime: number) {\n    if (this.isRotate) this.rotate(deltaTime);\n  }\n\n  switRotateStatus() {\n    this.isRotate = !this.isRotate;\n  }\n}\n"]}